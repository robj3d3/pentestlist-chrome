import {useCallback, useState} from "react";
import "./App.css";
import {ToolItemType} from "./types";
import {debounce} from "./utils/debounce";
import {
  Avatar,
  Box,
  Button,
  Divider,
  HStack,
  Image,
  Input,
  InputGroup,
  InputLeftElement,
  Link,
  Spinner,
  Tab,
  TabList,
  Tabs,
  Text,
  VStack,
} from "@chakra-ui/react";
import {FiSearch} from "react-icons/fi";
import {LuArrowUpRightSquare} from "react-icons/lu";
import {FaTools} from "react-icons/fa";
import {FaBookOpen, FaRegChartBar} from "react-icons/fa6";

function App() {
  const [searchTerm, setSearchTerm] = useState("");
  const [tools, setTools] = useState<ToolItemType[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const [tabIndex, setTabIndex] = useState(0);

  const debouncedSearch = useCallback(
    debounce((search: string) => {
      handleSearch(search);
    }, 300),
    [],
  ); // 300ms debounce time

  const handleSearch = async (search: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(
        `https://pentestlist.com/api/tools?page=1&searchTerm=${encodeURIComponent(search)}`,
      );
      if (!response.ok) throw new Error("Network response was not ok");
      const toolsData = await response.json();
      setTools(toolsData.flat(1));
    } catch (error) {
      console.error("Error:", error);
      setTools([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    debouncedSearch(e.target.value);
  };

  const openUrl = (url: string) => {
    window.open(url, "_blank", "noopener,noreferrer");
  };

  return (
    <Box
      bg="gray.50"
      minWidth="420px"
      display="flex"
      flexDir="column"
      alignItems="center"
      w="full"
    >
      <Tabs
        variant={"unstyled"}
        onChange={(index) => setTabIndex(index)}
        isLazy
        width="full"
        flexWrap={"wrap"}
      >
        {" "}
        <Box display="flex" flexDir="column" top={0} pos="sticky" zIndex={99}>
          <HStack width="full" bg="gray.50" pt={2} pb={3} px={2} gap={3}>
            <InputGroup width={"fit-content"} bg="white">
              <InputLeftElement pointerEvents="none">
                <FiSearch color="black" size={20} />
              </InputLeftElement>
              <Input
                type="text"
                value={searchTerm}
                placeholder="Search tools..."
                _placeholder={{color: "gray.700"}}
                textColor="color"
                prefix="@"
                borderWidth="1px"
                borderColor="black"
                borderRadius="6px"
                focusBorderColor="black"
                w="275px"
                fontSize="md"
                onChange={handleChange}
              />
            </InputGroup>
            <Button
              px={4}
              fontWeight={"semibold"}
              bg="#006BB3"
              color="white"
              transition="all 400ms ease"
              _hover={{
                bg: "#005c99",
              }}
              rightIcon={<LuArrowUpRightSquare color="white" size={16} />}
              onClick={() => openUrl("https://pentestlist.com")}
            >
              Explore
            </Button>
          </HStack>
          <Divider
            w="full"
            color="black"
            borderWidth="1px"
            opacity={0.8}
            mb={2}
          />
        </Box>
        <Box
          display="flex"
          flexDir="column"
          w="full"
          minH="86vh"
          overflowY="auto"
          px={2}
          pb={tools && tools.length ? 16 : 0}
    
        >
          {tools && tools.length > 0 ? (
            tools.map((tool, index) => (
              <Box
                key={`tool-item-${index}`}
                display="flex"
                flexDir="row"
                alignItems="center"
                onClick={() => openUrl(tool.url || "")}
                w="full"
                p={2}
                my={1}
                bg="white"
                borderColor="gray.300"
                borderWidth="1px"
                rounded="md"
                _hover={{
                  bg: "gray.100",
                  cursor: "pointer",
                }}
              >
                <Avatar
                  borderColor="black"
                  bg="white"
                  borderWidth={2}
                  rounded="full"
                  size="md"
                  src={tool.ogImageUrl}
                  name={tool.name}
                />
                <VStack alignItems="start" gap={0.5} pl={2}>
                  <HStack>
                    <Text fontWeight="bold" fontSize="sm">
                      {tool.name} â€¢
                    </Text>
                    {tool.platforms &&
                      tool.platforms.map((platform, index) => (
                        <Text key={`platform-tag-${index}`}>
                          {platform.name}
                        </Text>
                      ))}
                  </HStack>

                  <Text noOfLines={2} textOverflow={"ellipsis"}>
                    {tool.description}
                  </Text>
                </VStack>
              </Box>
            ))
          ) : (
            <Box
              mt={-20}
              display="flex"
              flexDir="column"
              w="full"
              minH="100vh"
              alignItems="center"
              justifyContent="center"
              gap={4}
            >
              {isLoading && (
                <Spinner color="gray.800" size="xl" borderWidth="3px" mb={2} />
              )}
              {!isLoading && <Image w="120px" src="images/empty.webp" />}
              <Text
                textAlign="center"
                maxW="200px"
                fontWeight="bold"
                fontSize="xl"
              >
                Search the latest top-rated tools
              </Text>
              <Text textAlign="center" fontSize="sm">
                Powered by{" "}
                <Link href="https://pentestlist.com" target="_blank">
                  <b>PentestList.com</b>
                </Link>
              </Text>
            </Box>
          )}
        </Box>
        <TabList
          mt={-16}
          bgColor={"gray.50"}
          borderRadius={"lg"}
          w="full"
          display="flex"
          justifyContent="space-between"
          bottom={0} pos="sticky" zIndex={99}
        >
          <Divider
            zIndex={99}
            w="full"
            color="black"
            borderWidth="1px"
            opacity={0.8}
            mt={-4}
          />
          <Tab pb={0} pt={3} minW="140px" _hover={{bg: "gray.100"}} rounded="md">
            <VStack>
              <FaTools color={tabIndex === 0 ? "#30313D" : "#87909C"} />
              <Text fontSize="md" fontWeight={tabIndex === 0 ? "bold" : "medium"}>Tools</Text>
              {tabIndex === 0 && <Box h={1.5} mb={0} w="60px" bgColor="#006BB3" rounded="lg"/>}
            </VStack>
          </Tab>
          <Tab pb={0} pt={3}   minW="140px" _hover={{bg: "gray.100"}} rounded="md">
            <VStack>
              <FaBookOpen color={tabIndex === 1 ? "#30313D" : "#87909C"} />
              <Text fontSize="md" fontWeight={tabIndex === 1 ? "bold" : "medium"}>Content</Text>
              {tabIndex === 1 && <Box h={1.5} mb={0} w="60px" bgColor="#006BB3" rounded="lg"/>}
            </VStack>
          </Tab>
          <Tab pb={0} pt={3}  minW="140px" _hover={{bg: "gray.100"}} rounded="md">
            <VStack>
              <FaRegChartBar strokeWidth="2px" color={tabIndex === 2 ? "#30313D" : "#87909C"} />
              <Text fontSize="md" fontWeight={tabIndex === 2 ? "bold" : "medium"}>Wordlists</Text>
              {tabIndex === 2 && <Box h={1.5} mb={0} w="60px" bgColor="#006BB3" rounded="lg"/>}
            </VStack>
          </Tab>
        </TabList>
      </Tabs>
    </Box>
  );
}

export default App;
