import { useCallback, useState } from "react";
import "./App.css";
import { ToolItemType } from "./types";
import { debounce } from "./utils/debounce";
import {
  Avatar,
  Box,
  Button,
  HStack,
  Input,
  InputGroup,
  InputLeftElement,
  Text,
} from "@chakra-ui/react";
import { FiSearch } from "react-icons/fi";
import { LuArrowUpRightSquare } from "react-icons/lu";

function App() {
  const [searchTerm, setSearchTerm] = useState("");
  const [tools, setTools] = useState<ToolItemType[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const debouncedSearch = useCallback(
    debounce((search: string) => {
      handleSearch(search);
    }, 300),
    [],
  ); // 300ms debounce time

  const handleSearch = async (search: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(
        `https://pentestlist.com/api/tools?page=1&searchTerm=${encodeURIComponent(search)}`,
      );
      if (!response.ok) throw new Error("Network response was not ok");
      const toolsData = await response.json();
      setTools(toolsData.flat(1));
    } catch (error) {
      console.error("Error:", error);
      setTools([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    debouncedSearch(e.target.value);
  };

  const openUrl = (url: string) => {
    window.open(url, "_blank", "noopener,noreferrer");
  };

  return (
    <Box
      minWidth="360px"
      overflowY={"visible"}
      display="flex"
      flexDir="column"
      alignItems="center"
      w="full"
    >
      <HStack
        width="full"
        bgColor="white"
        top={0}
        pos="sticky"
        zIndex={99}
        py={2}
        px={2}
        gap={3}
      >
        <InputGroup width={"fit-content"}>
          <InputLeftElement pointerEvents="none">
            <FiSearch color="black" size={20} />
          </InputLeftElement>
          <Input
            type="text"
            value={searchTerm}
            placeholder="Search tools..."
            _placeholder={{ color: "gray.700" }}
            textColor="color"
            prefix="@"
            borderWidth="1px"
            borderColor="black"
            borderRadius="6px"
            focusBorderColor="black"
            w="220px"
            fontSize="md"
            onChange={handleChange}
          />
        </InputGroup>
        <Button
          px={4}
          fontWeight={"semibold"}
          bg="#006BB3"
          color="white"
          transition="all 400ms ease"
          _hover={{
            bg: "#005c99",
          }}
          rightIcon={<LuArrowUpRightSquare color="white" size={16} />}
          onClick={() => openUrl("https://pentestlist.com")}
        >
          Explore
        </Button>
      </HStack>

      {tools.map((tool, index) => (
        <Box
          key={`tool-item-${index}`}
          display="flex"
          flexDir="row"
          onClick={() => openUrl(tool.url || "")}
          w="full"
          mx={4}
          my={1}
          borderColor="gray.300"
          borderWidth="1px"
          rounded="md"
        >
          <Avatar
            borderColor="black"
            bg="white"
            borderWidth={2}
            rounded="full"
            size="md"
            src={tool.ogImageUrl}
            name={tool.name}
          />
          <Text fontWeight="semi-bold">{tool.name}</Text>
        </Box>
      ))}
    </Box>
  );
}

export default App;
